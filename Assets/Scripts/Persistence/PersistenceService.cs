using EchoOfTheTimes.ScriptableObjects.Persistence;
using System.IO;
using UnityEngine;
using Zenject;

namespace EchoOfTheTimes.Persistence
{
    public class PersistenceService : MonoBehaviour
    {
        private enum PresetType
        {
            Saved,
            Default,
            AllUnlock
        }

        [SerializeField]
        private PresetType _presetType;

        public static SaveLoadService SaveLoadService { get; private set; }

        private PlayerData _defaultData;
        private PlayerData _allUnlockData;

        [Inject]
        private void Construct()
        {
            LoadPresets();

            SaveLoadService = _presetType switch
            {
                PresetType.Saved => new SaveLoadService(_defaultData),
                PresetType.Default => new SaveLoadService(_defaultData, true),
                PresetType.AllUnlock => new SaveLoadService(_allUnlockData, true),
                _ => throw new System.ArgumentException($"Unexpected {nameof(PresetType)} with value: '{_presetType}'!"),
            };

            Debug.Log($"Enable {typeof(SaveLoadService)} with preset: {_presetType}!");
        }

        private void LoadPresets()
        {
            _defaultData = LoadPresetFromResources(@"ScriptableObjects/Persistence/PlayerDataDefaultPreset-AutoGenerated");
            _allUnlockData = LoadPresetFromResources(@"ScriptableObjects/Persistence/PlayerDataUnlockedAllPreset-AutoGenerated");
        }

        private PlayerData LoadPresetFromResources(string path)
        {
            var preset = Resources.LoadAsync(path).asset as PlayerDataPresetScriptableObject;

            if (preset == null)
            {
                throw new System.NullReferenceException($"You need to create '{path.Split(Path.PathSeparator)[^1]}' first!");
            }

            return preset.Data;
        }
    }
}