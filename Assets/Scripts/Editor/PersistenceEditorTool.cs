using EchoOfTheTimes.Persistence;
using EchoOfTheTimes.SceneManagement;
using EchoOfTheTimes.ScriptableObjects.Persistence;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;
using System.IO;

namespace EchoOfTheTimes.Editor
{
    public class PersistenceEditorTool : MonoBehaviour
    {
        private const string _pathToFolder = @"Assets/Resources/ScriptableObjects/Persistence/";

        [MenuItem("Persistence/Presets/Create 'Default'")]
        private static void CreateDefaultPreset()
        {
            var preset = ScriptableObject.CreateInstance<PlayerDataPresetScriptableObject>();

            var playerData = LoadPlayerDataFromSceneLoader();

            for (int i = 0; i < playerData.Data.Count; i++)
            {
                playerData.Data[i].ChapterStatus = StatusType.Locked;

                for (int j = 0; j < playerData.Data[i].Levels.Count; j++)
                {
                    playerData.Data[i].Levels[j].LevelStatus = StatusType.Locked;
                    playerData.Data[i].Levels[j].Collected = 0;
                }
            }

            playerData.Data[0].ChapterStatus = StatusType.Unlocked;
            playerData.Data[0].Levels[0].LevelStatus = StatusType.Unlocked;

            playerData.Data[1].ChapterStatus = StatusType.Unlocked;
            playerData.Data[1].Levels[0].LevelStatus = StatusType.Unlocked;


            preset.Data = playerData;

            string path = _pathToFolder + "PlayerDataDefaultPreset-AutoGenerated.asset";
            AssetDatabase.CreateAsset(preset, path);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
            EditorUtility.FocusProjectWindow();
            Selection.activeObject = preset;

            Debug.Log($"Preset created in '{path}'!");
        }

        [MenuItem("Persistence/Presets/Create 'Unlocked All'")]
        private static void CreateUnlockedAllPreset()
        {
            var preset = ScriptableObject.CreateInstance<PlayerDataPresetScriptableObject>();

            var playerData = LoadPlayerDataFromSceneLoader();

            for (int i = 0; i < playerData.Data.Count; i++)
            {
                playerData.Data[i].ChapterStatus = StatusType.Unlocked;

                for (int j = 0; j < playerData.Data[i].Levels.Count; j++)
                {
                    playerData.Data[i].Levels[j].LevelStatus = StatusType.Unlocked;
                    playerData.Data[i].Levels[j].Collected = playerData.Data[i].Levels[j].TotalCollectables;
                }
            }

            preset.Data = playerData;

            string path = _pathToFolder + "PlayerDataUnlockedAllPreset-AutoGenerated.asset";
            AssetDatabase.CreateAsset(preset, path);
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
            EditorUtility.FocusProjectWindow();
            Selection.activeObject = preset;

            Debug.Log($"Preset created in '{path}'!");
        }

        [MenuItem("Persistence/Presets/Delete Presets")]
        private static void DeletePresets()
        {
            string path = _pathToFolder + "PlayerDataUnlockedAllPreset-AutoGenerated.asset";
            AssetDatabase.DeleteAsset(path);
            path = _pathToFolder + "PlayerDataDefaultPreset-AutoGenerated.asset";
            AssetDatabase.DeleteAsset(path);

            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
            EditorUtility.FocusProjectWindow();
        }

        [MenuItem("Persistence/Delete Save File")]
        private static void DeleteSaveFile()
        {
            string path = Path.Combine(Application.persistentDataPath, "SaveData.json");

            if (!File.Exists(path))
            {
                Debug.LogWarning($"Save file '{path}' doesn't exist!");
                return;
            }

            File.Delete(path);

            Debug.LogWarning($"Save file '{path}' has been deleted!");
        }

        private static PlayerData LoadPlayerDataFromSceneLoader()
        {
            var scene = EditorSceneManager.GetSceneByName("Bootstrapper");

            if (!scene.isLoaded)
            {
                scene = EditorSceneManager.OpenScene("Assets/Scenes/Bootstrapper.unity", OpenSceneMode.Additive);
            }

            SceneLoader loader = FindAnyObjectByType<SceneLoader>();

            if (scene.isLoaded)
            {
                EditorSceneManager.CloseScene(scene, true);
            }

            PlayerData data = new PlayerData()
            {
                Data = loader.GameChapters
            };

            return data;
        }
    }
}